<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lecturer Dashboard</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Lecturer-specific styles */
        .grading-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            background: white;
            box-shadow: var(--card-shadow);
            border-radius: 10px;
            overflow: hidden;
        }

        .grading-table th,
        .grading-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .grading-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .grading-table tr:hover {
            background-color: #f8f9fa;
        }

        .btn-grade {
            background-color: var(--primary-color);
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }

        .btn-grade:hover {
            background-color: #357abd;
        }

        .no-submissions {
            text-align: center;
            padding: 40px;
            color: #666;
            background: white;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            margin-top: 20px;
        }

        .performance-section {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            margin-top: 20px;
        }

        .chart-container {
            max-width: 800px;
            margin: 20px auto;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-graded {
            background-color: #d4edda;
            color: #155724;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            position: relative;
            background-color: #fff;
            margin: 2% auto;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            max-height: 90vh;
            overflow-y: auto;
        }

        /* Grading modal needs to be wider for document preview */
        #gradingModal .modal-content {
            max-width: 1200px;
        }

        .modal-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 1rem;
        }

        .file-preview-section {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            min-height: 400px;
            border: 1px solid #ddd;
        }

        .file-preview-section h3 {
            margin-bottom: 1rem;
            color: var(--secondary-color);
        }

        .file-preview-container {
            width: 100%;
            height: 90%;
            border: 1px solid #ddd;
            background: white;
            overflow: auto;
        }

        .file-preview-container iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        .file-preview-container .text-preview {
            padding: 1rem;
            white-space: pre-wrap;
            font-family: monospace;
        }

        .grade-form {
            margin-top: 0;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .form-group input[type="text"],
        .form-group input[type="email"],
        .form-group input[type="password"],
        .form-group input[type="number"],
        .form-group input[type="date"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
            box-sizing: border-box;
        }

        .form-group textarea {
            min-height: 150px;
            resize: vertical;
        }

        .form-group input:read-only {
            background-color: #f8f9fa;
        }

        .modal-actions {
            margin-top: 2rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn-cancel {
            background-color: #6c757d;
            color: white;
        }

        .btn-cancel:hover {
            background-color: #5a6268;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            top: 10px;
            right: 15px;
        }

        .close-modal:hover {
            color: black;
        }

        /* Toast Styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            color: white;
            font-weight: 500;
            display: none;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.3s ease-in-out;
        }

        .toast-success {
            background-color: var(--success-color);
        }

        .toast-error {
            background-color: var(--danger-color);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }

            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .modal-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-chalkboard-teacher"></i> Lecturer Panel</h3>
            </div>
            <ul class="nav-links">
                <li><a href="/lecturer/dashboard" class="active"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="/lecturer/assignments-page"><i class="fas fa-tasks"></i> My Assignments</a></li>
                <li><a href="/lecturer/submissions"><i class="fas fa-file-alt"></i> All Submissions</a></li>
                <li><a href="/lecturer/reports"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </nav>

        <main class="main-content">
            <header class="dashboard-header">
                <h1><i class="fas fa-tachometer-alt"></i> Lecturer Dashboard</h1>
                <div class="user-info">
                    <i class="fas fa-user-circle"></i> Welcome, <%= user.full_name %>
                </div>
            </header>

            <div class="quick-actions">
                <h2><i class="fas fa-bolt"></i> Quick Actions</h2>
                <div class="action-buttons">
                    <button onclick="showAssignmentModal()" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create New Assignment
                    </button>
                    <a href="/lecturer/submissions" class="btn btn-primary">
                        <i class="fas fa-file-alt"></i> View All Submissions
                    </a>
                    <a href="/lecturer/reports" class="btn btn-primary">
                        <i class="fas fa-chart-bar"></i> Generate Reports
                    </a>
                </div>
            </div>

            <div class="performance-section">
                <h2><i class="fas fa-chart-line"></i> Submissions to Grade</h2>
                <% if (submissions && submissions.length> 0) { %>
                    <div class="table-container">
                        <table class="grading-table">
                            <thead>
                                <tr>
                                    <th>Student</th>
                                    <th>Assignment</th>
                                    <th>Submission Date</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% submissions.forEach(submission=> { %>
                                    <tr>
                                        <td>
                                            <%= submission.student_name %>
                                        </td>
                                        <td>
                                            <%= submission.assignment_title %>
                                        </td>
                                        <td>
                                            <%= new Date(submission.submitted_at).toLocaleDateString() %>
                                        </td>
                                        <td>
                                            <span class="status-badge status-<%= submission.status.toLowerCase() %>">
                                                <%= submission.status %>
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn-grade"
                                                onclick="openGradingModal('<%= submission.submission_id %>', '<%= submission.student_name %>', '<%= submission.assignment_title %>', '<%= submission.submitted_at %>')">
                                                <i class="fas fa-check-circle"></i> Grade Now
                                            </button>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                        </table>
                    </div>
                    <% } else { %>
                        <div class="no-submissions">
                            <i class="fas fa-inbox fa-3x" style="color: #ccc; margin-bottom: 20px;"></i>
                            <h3>No submissions to grade</h3>
                            <p>All submissions have been graded or no new submissions are available.</p>
                        </div>
                        <% } %>
            </div>

            <div class="performance-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2><i class="fas fa-chart-bar"></i> Class Performance</h2>
                    <select id="assignmentDropdown" style="min-width: 200px;">
                        <% if (assignments && assignments.length> 0) { %>
                            <% assignments.forEach(function(assignment) { %>
                                <option value="<%= assignment.id %>">
                                    <%= assignment.title %>
                                </option>
                                <% }); %>
                                    <% } else { %>
                                        <option disabled selected>No assignments found</option>
                                        <% } %>
                    </select>
                </div>
                <div class="chart-container">
                    <canvas id="classChart"></canvas>
                </div>
            </div>
        </main>
    </div>

    <!-- Grading Modal -->
    <div id="gradingModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2><i class="fas fa-check-circle"></i> Grade Submission</h2>
            <div class="modal-grid">
                <div class="file-preview-section">
                    <h3>Submission Preview</h3>
                    <div class="file-preview-container" id="filePreview">
                        <!-- File preview will be loaded here -->
                    </div>
                </div>
                <div class="grade-form">
                    <div class="form-group">
                        <label for="studentName">Student:</label>
                        <input type="text" id="studentName" readonly>
                    </div>
                    <div class="form-group">
                        <label for="assignmentTitle">Assignment:</label>
                        <input type="text" id="assignmentTitle" readonly>
                    </div>
                    <div class="form-group">
                        <label for="submissionDate">Submission Date:</label>
                        <input type="text" id="submissionDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="grade">Grade (0-100):</label>
                        <input type="number" id="grade" min="0" max="100" required>
                    </div>
                    <div class="form-group">
                        <label for="feedback">Feedback:</label>
                        <textarea id="feedback" required></textarea>
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-cancel" onclick="closeModal()">Cancel</button>
                        <button class="btn btn-primary" onclick="submitGrade()">Submit Grade</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignment Creation Modal -->
    <div id="assignmentModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2><i class="fas fa-plus"></i> Create New Assignment</h2>
            <form id="assignmentForm" action="/lecturer/create-assignment" method="POST">
                <div class="form-group">
                    <label for="title">Assignment Title:</label>
                    <input type="text" id="title" name="title" required>
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" name="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="deadline">Deadline:</label>
                    <input type="date" id="deadline" name="deadline" required>
                </div>
                <div class="form-group">
                    <label for="maxMarks">Maximum Marks:</label>
                    <input type="number" id="maxMarks" name="maxMarks" min="1" required>
                </div>
                <div class="form-group">
                    <label for="subjectId">Subject:</label>
                    <select id="subjectId" name="subjectId" required>
                        <option value="">Select a subject</option>
                        <% if (subjects && subjects.length> 0) { %>
                            <% subjects.forEach(function(subject) { %>
                                <option value="<%= subject.id %>">
                                    <%= subject.name %>
                                </option>
                                <% }); %>
                                    <% } %>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn btn-cancel" onclick="closeAssignmentModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Assignment</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script src="/js/lecturer.js"></script>
    <script src="/js/grading.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Helper: get first assignmentId if available
        const firstAssignmentId = (typeof assignments !== 'undefined' && assignments.length > 0) ? assignments[0].id : null;

        // Chart.js setup for grade distribution
        const ctx = document.getElementById('classChart').getContext('2d');
        let chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['A', 'B', 'C', 'D', 'F'],
                datasets: [{
                    label: 'Grade Distribution',
                    data: [0, 0, 0, 0, 0],
                    backgroundColor: 'rgba(74, 144, 226, 0.7)',
                    borderColor: 'rgba(74, 144, 226, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        precision: 0
                    }
                }
            }
        });

        // Function to fetch and update grade distribution
        async function updateGradeDistribution(assignmentId) {
            if (!assignmentId) return;
            try {
                const response = await fetch(`/lecturer/grade-distribution/${assignmentId}`);
                const result = await response.json();
                if (result.success && result.distribution) {
                    const dist = result.distribution;
                    chart.data.datasets[0].data = [dist.A || 0, dist.B || 0, dist.C || 0, dist.D || 0, dist.F || 0];
                } else {
                    chart.data.datasets[0].data = [0, 0, 0, 0, 0];
                }
                chart.update();
            } catch (err) {
                console.error('Failed to fetch grade distribution', err);
                chart.data.datasets[0].data = [0, 0, 0, 0, 0];
                chart.update();
            }
        }

        // On page load, show first assignment's distribution
        if (firstAssignmentId) {
            updateGradeDistribution(firstAssignmentId);
        }

        // Dropdown change event (AJAX)
        const dropdown = document.getElementById('assignmentDropdown');
        dropdown.addEventListener('change', function () {
            updateGradeDistribution(this.value);
        });

        // Modal functionality
        function closeModal() {
            document.getElementById('gradingModal').style.display = 'none';
        }

        // Close modal when clicking the X
        document.querySelector('.close-modal').onclick = function () {
            closeModal();
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                closeModal();
            }
        }

        // Toast functionality
        function showToast(message, type) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast toast-${type}`;
            toast.style.display = 'block';

            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease-in-out';
                setTimeout(() => {
                    toast.style.display = 'none';
                    toast.style.animation = 'slideIn 0.3s ease-in-out';
                }, 300);
            }, 3000);
        }

        // Modal functionality
        function showSubjectModal() {
            document.getElementById('subjectModal').style.display = 'block';
        }

        function showUserModal() {
            document.getElementById('userModal').style.display = 'block';
        }

        function showAssignmentModal() {
            document.getElementById('assignmentModal').style.display = 'block';
        }

        function closeAssignmentModal() {
            document.getElementById('assignmentModal').style.display = 'none';
            document.getElementById('assignmentForm').reset();
        }

        // Close modal when clicking the X
        document.querySelectorAll('.close-modal').forEach(closeBtn => {
            closeBtn.onclick = function () {
                this.closest('.modal').style.display = 'none';
                // Reset assignment form if it's the assignment modal
                if (this.closest('#assignmentModal')) {
                    document.getElementById('assignmentForm').reset();
                }
            }
        });

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
                // Reset assignment form if it's the assignment modal
                if (event.target.id === 'assignmentModal') {
                    document.getElementById('assignmentForm').reset();
                }
            }
        }

        // Assignment form submission
        document.getElementById('assignmentForm').onsubmit = async function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            try {
                const response = await fetch('/lecturer/create-assignment', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok) {
                    showToast('Assignment created successfully!', 'success');
                    // Close modal
                    closeAssignmentModal();
                    // Reload page after toast
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showToast(data.message || 'Failed to create assignment', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred. Please try again.', 'error');
            }
        };
    </script>
</body>

</html>