<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Assignments - Lecturer Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            padding: 20px;
            margin-top: 20px;
            width: 100%;
            overflow-x: auto;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .data-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .data-table tr:hover {
            background-color: #f8f9fa;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-edit {
            background-color: var(--primary-color);
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }

        .btn-edit:hover {
            background-color: #357abd;
        }

        .btn-delete {
            background-color: var(--danger-color);
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }

        .btn-delete:hover {
            background-color: #c82333;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 10px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group input[type="date"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
            box-sizing: border-box;
        }

        .form-group textarea {
            min-height: 150px;
            resize: vertical;
        }

        .modal-actions {
            margin-top: 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .btn-cancel {
            background-color: #6c757d;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-cancel:hover {
            background-color: #5a6268;
        }

        /* Toast Styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            color: white;
            font-weight: 500;
            display: none;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.3s ease-in-out;
        }

        .toast-success {
            background-color: var(--success-color);
        }

        .toast-error {
            background-color: var(--danger-color);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }

            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Loading Spinner */
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading-spinner.active {
            display: block;
        }

        .loading-spinner i {
            font-size: 2rem;
            color: var(--primary-color);
        }
    </style>
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-chalkboard-teacher"></i> Lecturer Panel</h3>
            </div>
            <ul class="nav-links">
                <li><a href="/lecturer/dashboard"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="/lecturer/assignments-page" class="active"><i class="fas fa-tasks"></i> My Assignments</a>
                </li>
                <li><a href="/lecturer/submissions"><i class="fas fa-file-alt"></i> All Submissions</a></li>
                <li><a href="/lecturer/reports"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </nav>

        <main class="main-content">
            <header class="dashboard-header">
                <h1><i class="fas fa-tasks"></i> My Assignments</h1>
                <div class="user-info">
                    <button onclick="showAssignmentModal()" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create New Assignment
                    </button>
                </div>
            </header>

            <div class="table-container">
                <h2><i class="fas fa-list"></i> Assignment List</h2>
                <div id="loadingSpinner" class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading assignments...</p>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Subject</th>
                            <th>Deadline</th>
                            <th>Max Marks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="assignmentsTableBody">
                        <!-- Assignments will be loaded here -->
                    </tbody>
                </table>
                <div id="noAssignments" class="no-data" style="display: none;">
                    <i class="fas fa-inbox fa-3x" style="color: #ccc; margin-bottom: 20px;"></i>
                    <h3>No assignments found</h3>
                    <p>You haven't created any assignments yet.</p>
                </div>
            </div>
        </main>
    </div>

    <!-- Edit Assignment Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2><i class="fas fa-edit"></i> Edit Assignment</h2>
            <form id="editForm">
                <input type="hidden" id="editAssignmentId" name="id">
                <div class="form-group">
                    <label for="editTitle">Assignment Title:</label>
                    <input type="text" id="editTitle" name="title" required>
                </div>
                <div class="form-group">
                    <label for="editDescription">Description:</label>
                    <textarea id="editDescription" name="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="editDeadline">Deadline:</label>
                    <input type="date" id="editDeadline" name="deadline" required>
                </div>
                <div class="form-group">
                    <label for="editMaxMarks">Maximum Marks:</label>
                    <input type="number" id="editMaxMarks" name="maxMarks" min="1" required>
                </div>
                <div class="form-group">
                    <label for="editSubjectId">Subject:</label>
                    <select id="editSubjectId" name="subjectId" required>
                        <option value="">Select a subject</option>
                        <% if (subjects && subjects.length> 0) { %>
                            <% subjects.forEach(function(subject) { %>
                                <option value="<%= subject.id %>">
                                    <%= subject.name %>
                                </option>
                                <% }); %>
                                    <% } %>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Assignment</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2><i class="fas fa-exclamation-triangle"></i> Confirm Delete</h2>
            <p>Are you sure you want to delete this assignment? This action cannot be undone.</p>
            <div class="modal-actions">
                <button class="btn-cancel" onclick="closeDeleteModal()">Cancel</button>
                <button class="btn-delete" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>

    <!-- Assignment Creation Modal -->
    <div id="assignmentModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2><i class="fas fa-plus"></i> Create New Assignment</h2>
            <form id="assignmentForm" action="/lecturer/create-assignment" method="POST">
                <div class="form-group">
                    <label for="title">Assignment Title:</label>
                    <input type="text" id="title" name="title" required>
                </div>
                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea id="description" name="description" required></textarea>
                </div>
                <div class="form-group">
                    <label for="deadline">Deadline:</label>
                    <input type="date" id="deadline" name="deadline" required>
                </div>
                <div class="form-group">
                    <label for="maxMarks">Maximum Marks:</label>
                    <input type="number" id="maxMarks" name="maxMarks" min="1" required>
                </div>
                <div class="form-group">
                    <label for="subjectId">Subject:</label>
                    <select id="subjectId" name="subjectId" required>
                        <option value="">Select a subject</option>
                        <% if (subjects && subjects.length> 0) { %>
                            <% subjects.forEach(function(subject) { %>
                                <option value="<%= subject.id %>">
                                    <%= subject.name %>
                                </option>
                                <% }); %>
                                    <% } %>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-cancel" onclick="closeAssignmentModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Assignment</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script>
        let assignmentToDelete = null;

        // Load assignments on page load
        document.addEventListener('DOMContentLoaded', function () {
            loadAssignments();
        });

        // Function to load assignments
        async function loadAssignments() {
            const spinner = document.getElementById('loadingSpinner');
            const tableBody = document.getElementById('assignmentsTableBody');
            const noAssignments = document.getElementById('noAssignments');

            spinner.classList.add('active');
            tableBody.innerHTML = '';
            noAssignments.style.display = 'none';

            try {
                const response = await fetch('/lecturer/assignments');
                const data = await response.json();

                if (data.success) {
                    if (data.assignments.length === 0) {
                        noAssignments.style.display = 'block';
                    } else {
                        // Get subjects for mapping
                        const subjectsResponse = await fetch('/lecturer/subjects');
                        const subjectsData = await subjectsResponse.json();
                        const subjectsMap = {};
                        if (subjectsData.success) {
                            subjectsData.subjects.forEach(subject => {
                                subjectsMap[subject.id] = subject.name;
                            });
                        }

                        data.assignments.forEach(assignment => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${assignment.title}</td>
                                <td>${assignment.description}</td>
                                <td>${subjectsMap[assignment.subject_id] || 'N/A'}</td>
                                <td>${formatDate(assignment.deadline)}</td>
                                <td>${assignment.max_marks}</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn-edit" onclick="editAssignment(${assignment.id})">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="btn-delete" onclick="showDeleteModal(${assignment.id})">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });
                    }
                } else {
                    showToast('Failed to load assignments', 'error');
                }
            } catch (error) {
                showToast('Error loading assignments', 'error');
            } finally {
                spinner.classList.remove('active');
            }
        }

        // Function to format date
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }

        // Function to format date for input field
        function formatDateForInput(dateString) {
            const date = new Date(dateString);
            return date.toISOString().split('T')[0];
        }

        // Function to show delete confirmation modal
        function showDeleteModal(id) {
            assignmentToDelete = id;
            document.getElementById('deleteModal').style.display = 'block';
        }

        // Function to close delete modal
        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            assignmentToDelete = null;
        }

        // Function to confirm and execute delete
        async function confirmDelete() {
            if (!assignmentToDelete) return;

            try {
                const response = await fetch(`/lecturer/assignments/${assignmentToDelete}`, {
                    method: 'DELETE'
                });
                const data = await response.json();

                if (data.success) {
                    showToast('Assignment deleted successfully', 'success');
                    loadAssignments();
                } else {
                    showToast(data.message || 'Failed to delete assignment', 'error');
                }
            } catch (error) {
                showToast('Error deleting assignment', 'error');
            } finally {
                closeDeleteModal();
            }
        }

        // Function to load assignment data into edit modal
        async function editAssignment(id) {
            try {
                const response = await fetch(`/lecturer/assignments/${id}`);
                const data = await response.json();

                if (data.success) {
                    const assignment = data.assignment;

                    // Fill form with assignment data
                    document.getElementById('editAssignmentId').value = assignment.id;
                    document.getElementById('editTitle').value = assignment.title;
                    document.getElementById('editDescription').value = assignment.description;
                    document.getElementById('editDeadline').value = formatDateForInput(assignment.deadline);
                    document.getElementById('editMaxMarks').value = assignment.max_marks;
                    document.getElementById('editSubjectId').value = assignment.subject_id;

                    // Show modal
                    document.getElementById('editModal').style.display = 'block';
                } else {
                    showToast('Failed to load assignment data', 'error');
                }
            } catch (error) {
                showToast('Error loading assignment data', 'error');
            }
        }

        // Function to close edit modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
            document.getElementById('editForm').reset();
        }

        // Edit form submission
        document.getElementById('editForm').onsubmit = async function (e) {
            e.preventDefault();
            const formData = new FormData(this);
            const assignmentId = formData.get('id');

            try {
                const response = await fetch(`/lecturer/assignments/${assignmentId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title: formData.get('title'),
                        description: formData.get('description'),
                        deadline: formData.get('deadline'),
                        maxMarks: formData.get('maxMarks'),
                        subjectId: formData.get('subjectId')
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    showToast('Assignment updated successfully!', 'success');
                    closeEditModal();
                    loadAssignments();
                } else {
                    showToast(data.message || 'Failed to update assignment', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred. Please try again.', 'error');
            }
        };

        // Close modals when clicking the X
        document.querySelectorAll('.close').forEach(closeBtn => {
            closeBtn.onclick = function () {
                this.closest('.modal').style.display = 'none';
            }
        });

        // Close modals when clicking outside
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Toast functionality
        function showToast(message, type) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast toast-${type}`;
            toast.style.display = 'block';

            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease-in-out';
                setTimeout(() => {
                    toast.style.display = 'none';
                    toast.style.animation = 'slideIn 0.3s ease-in-out';
                }, 300);
            }, 3000);
        }

        // Function to edit assignment (redirect to create-assignment page)
        function editAssignment(id) {
            window.location.href = `/lecturer/create-assignment?edit=${id}`;
        }

        // Assignment modal functionality
        function showAssignmentModal() {
            document.getElementById('assignmentModal').style.display = 'block';
        }

        function closeAssignmentModal() {
            document.getElementById('assignmentModal').style.display = 'none';
            document.getElementById('assignmentForm').reset();
        }

        // Close modal when clicking the X
        document.querySelectorAll('.close').forEach(closeBtn => {
            closeBtn.onclick = function () {
                this.closest('.modal').style.display = 'none';
                // Reset assignment form if it's the assignment modal
                if (this.closest('#assignmentModal')) {
                    document.getElementById('assignmentForm').reset();
                }
            }
        });

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
                // Reset assignment form if it's the assignment modal
                if (event.target.id === 'assignmentModal') {
                    document.getElementById('assignmentForm').reset();
                }
            }
        }

        // Assignment form submission
        document.getElementById('assignmentForm').onsubmit = async function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            try {
                const response = await fetch('/lecturer/create-assignment', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok) {
                    showToast('Assignment created successfully!', 'success');
                    // Close modal
                    closeAssignmentModal();
                    // Reload assignments table
                    loadAssignments();
                } else {
                    showToast(data.message || 'Failed to create assignment', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('An error occurred. Please try again.', 'error');
            }
        };
    </script>
</body>

</html>