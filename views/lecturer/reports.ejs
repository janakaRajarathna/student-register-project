<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reports - Lecturer Dashboard</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Reports-specific styles */
        .reports-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }

        .report-card {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
        }

        .report-card h3 {
            margin-bottom: 1.5rem;
            color: var(--secondary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin-top: 1rem;
        }

        .controls-section {
            margin-bottom: 1.5rem;
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            font-weight: 600;
            color: var(--secondary-color);
            font-size: 0.9rem;
        }

        .form-group select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            min-width: 200px;
            font-size: 0.9rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid var(--primary-color);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 0.25rem;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .no-data {
            text-align: center;
            padding: 3rem;
            color: #666;
            background: #f8f9fa;
            border-radius: 8px;
            margin-top: 1rem;
        }

        .no-data i {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #ccc;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .reports-container {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .controls-section {
                flex-direction: column;
                align-items: stretch;
            }

            .form-group select {
                min-width: auto;
            }
        }
    </style>
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-chalkboard-teacher"></i> Lecturer Panel</h3>
            </div>
            <ul class="nav-links">
                <li><a href="/lecturer/dashboard"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="/lecturer/assignments-page"><i class="fas fa-tasks"></i> My Assignments</a></li>
                <li><a href="/lecturer/submissions"><i class="fas fa-file-alt"></i> All Submissions</a></li>
                <li><a href="/lecturer/reports" class="active"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </nav>

        <main class="main-content">
            <header class="dashboard-header">
                <h1><i class="fas fa-chart-bar"></i> Reports & Analytics</h1>
                <div class="user-info">
                    <i class="fas fa-user-circle"></i> Welcome, <%= user.full_name %>
                </div>
            </header>

            <div class="reports-container">
                <!-- Grade Distribution Chart -->
                <div class="report-card">
                    <h3><i class="fas fa-chart-pie"></i> Assignment Grade Distribution</h3>

                    <div class="controls-section">
                        <div class="form-group">
                            <label for="assignmentSelect">Select Assignment:</label>
                            <select id="assignmentSelect">
                                <option value="">Choose an assignment</option>
                                <% if (assignments && assignments.length> 0) { %>
                                    <% assignments.forEach(function(assignment) { %>
                                        <option value="<%= assignment.id %>">
                                            <%= assignment.title %>
                                        </option>
                                        <% }); %>
                                            <% } %>
                            </select>
                        </div>
                    </div>

                    <div class="chart-container">
                        <canvas id="gradeDistributionChart"></canvas>
                    </div>

                    <div class="stats-grid" id="gradeStats">
                        <!-- Grade statistics will be populated here -->
                    </div>
                </div>

                <!-- Student Performance Chart -->
                <div class="report-card">
                    <h3><i class="fas fa-chart-line"></i> Student Performance Trend</h3>

                    <div class="controls-section">
                        <div class="form-group">
                            <label for="studentSelect">Select Student:</label>
                            <select id="studentSelect">
                                <option value="">Choose a student</option>
                                <% if (students && students.length> 0) { %>
                                    <% students.forEach(function(student) { %>
                                        <option value="<%= student.id %>">
                                            <%= student.full_name %>
                                        </option>
                                        <% }); %>
                                            <% } %>
                            </select>
                        </div>
                    </div>

                    <div class="chart-container">
                        <canvas id="studentPerformanceChart"></canvas>
                    </div>

                    <div class="stats-grid" id="studentStats">
                        <!-- Student statistics will be populated here -->
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Initialize charts
        let gradeDistributionChart = null;
        let studentPerformanceChart = null;

        // Grade Distribution Chart
        function initializeGradeDistributionChart() {
            const ctx = document.getElementById('gradeDistributionChart').getContext('2d');
            gradeDistributionChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['A (80-100)', 'B (70-79)', 'C (60-69)', 'D (50-59)', 'F (0-49)'],
                    datasets: [{
                        label: 'Number of Students',
                        data: [0, 0, 0, 0, 0],
                        backgroundColor: [
                            'rgba(40, 167, 69, 0.7)',   // Green for A
                            'rgba(23, 162, 184, 0.7)',  // Blue for B
                            'rgba(255, 193, 7, 0.7)',   // Yellow for C
                            'rgba(255, 152, 0, 0.7)',   // Orange for D
                            'rgba(220, 53, 69, 0.7)'    // Red for F
                        ],
                        borderColor: [
                            'rgba(40, 167, 69, 1)',
                            'rgba(23, 162, 184, 1)',
                            'rgba(255, 193, 7, 1)',
                            'rgba(255, 152, 0, 1)',
                            'rgba(220, 53, 69, 1)'
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            precision: 0
                        }
                    }
                }
            });
        }

        // Student Performance Chart
        function initializeStudentPerformanceChart() {
            const ctx = document.getElementById('studentPerformanceChart').getContext('2d');
            studentPerformanceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Marks (%)',
                        data: [],
                        borderColor: 'rgba(74, 144, 226, 1)',
                        backgroundColor: 'rgba(74, 144, 226, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function (value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });
        }

        // Update grade distribution
        async function updateGradeDistribution(assignmentId) {
            if (!assignmentId) {
                gradeDistributionChart.data.datasets[0].data = [0, 0, 0, 0, 0];
                gradeDistributionChart.update();
                document.getElementById('gradeStats').innerHTML = '';
                return;
            }

            try {
                const response = await fetch(`/lecturer/grade-distribution/${assignmentId}`);
                const result = await response.json();

                if (result.success && result.distribution) {
                    const dist = result.distribution;
                    const data = [dist.A || 0, dist.B || 0, dist.C || 0, dist.D || 0, dist.F || 0];

                    gradeDistributionChart.data.datasets[0].data = data;
                    gradeDistributionChart.update();

                    // Update statistics
                    const total = data.reduce((sum, val) => sum + val, 0);
                    const statsHtml = `
                        <div class="stat-card">
                            <div class="stat-value">${total}</div>
                            <div class="stat-label">Total Students</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${dist.A || 0}</div>
                            <div class="stat-label">Grade A</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${dist.B || 0}</div>
                            <div class="stat-label">Grade B</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${dist.C || 0}</div>
                            <div class="stat-label">Grade C</div>
                        </div>
                    `;
                    document.getElementById('gradeStats').innerHTML = statsHtml;
                }
            } catch (error) {
                console.error('Error fetching grade distribution:', error);
            }
        }

        // Update student performance
        async function updateStudentPerformance(studentId) {
            if (!studentId) {
                studentPerformanceChart.data.labels = [];
                studentPerformanceChart.data.datasets[0].data = [];
                studentPerformanceChart.update();
                document.getElementById('studentStats').innerHTML = '';
                return;
            }

            try {
                const response = await fetch(`/lecturer/student-performance/${studentId}`);
                const result = await response.json();

                if (result.success && result.performance) {
                    const performance = result.performance;

                    if (performance.length === 0) {
                        document.getElementById('studentStats').innerHTML = `
                            <div class="no-data">
                                <i class="fas fa-chart-line"></i>
                                <h4>No Performance Data</h4>
                                <p>This student hasn't completed any assignments yet.</p>
                            </div>
                        `;
                        return;
                    }

                    const labels = performance.map(p => p.assignment_title);
                    const data = performance.map(p => p.percentage);
                    const marks = performance.map(p => p.marks);

                    studentPerformanceChart.data.labels = labels;
                    studentPerformanceChart.data.datasets[0].data = data;
                    studentPerformanceChart.update();

                    // Calculate statistics
                    const avgPercentage = (data.reduce((sum, val) => sum + val, 0) / data.length).toFixed(1);
                    const avgMarks = (marks.reduce((sum, val) => sum + val, 0) / marks.length).toFixed(1);
                    const maxMarks = Math.max(...marks);
                    const minMarks = Math.min(...marks);

                    const statsHtml = `
                        <div class="stat-card">
                            <div class="stat-value">${avgPercentage}%</div>
                            <div class="stat-label">Average</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${avgMarks}</div>
                            <div class="stat-label">Avg Marks</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${maxMarks}</div>
                            <div class="stat-label">Highest</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">${minMarks}</div>
                            <div class="stat-label">Lowest</div>
                        </div>
                    `;
                    document.getElementById('studentStats').innerHTML = statsHtml;
                }
            } catch (error) {
                console.error('Error fetching student performance:', error);
            }
        }

        // Event listeners
        document.getElementById('assignmentSelect').addEventListener('change', function () {
            updateGradeDistribution(this.value);
        });

        document.getElementById('studentSelect').addEventListener('change', function () {
            updateStudentPerformance(this.value);
        });

        // Initialize charts on page load
        document.addEventListener('DOMContentLoaded', function () {
            initializeGradeDistributionChart();
            initializeStudentPerformanceChart();
        });
    </script>
</body>

</html>