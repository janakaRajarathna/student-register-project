<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Submissions - Lecturer Panel</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            padding: 20px;
            margin-top: 20px;
            width: 100%;
            overflow-x: auto;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .data-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .data-table tr:hover {
            background-color: #f8f9fa;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn-grade {
            background-color: var(--primary-color);
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }

        .btn-grade:hover {
            background-color: #357abd;
        }

        .btn-view {
            background-color: var(--success-color);
            color: white;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s;
        }

        .btn-view:hover {
            background-color: #27ae60;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-graded {
            background-color: #d4edda;
            color: #155724;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            overflow-y: auto;
        }

        .modal-content {
            position: relative;
            background-color: #fff;
            margin: 2% auto;
            padding: 2rem;
            width: 90%;
            max-width: 1200px;
            border-radius: 10px;
            box-shadow: var(--card-shadow);
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 1rem;
        }

        .file-preview-section {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            min-height: 400px;
            border: 1px solid #ddd;
        }

        .file-preview-section h3 {
            margin-bottom: 1rem;
            color: var(--secondary-color);
        }

        .file-preview-container {
            width: 100%;
            height: 350px;
            border: 1px solid #ddd;
            background: white;
            overflow: auto;
        }

        .file-preview-container iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        .file-preview-container .text-preview {
            padding: 1rem;
            white-space: pre-wrap;
            font-family: monospace;
        }

        .grade-form {
            margin-top: 0;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1em;
            box-sizing: border-box;
        }

        .form-group textarea {
            min-height: 150px;
            resize: vertical;
        }

        .form-group input:read-only {
            background-color: #f8f9fa;
        }

        .modal-actions {
            margin-top: 2rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        .btn-cancel {
            background-color: #6c757d;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-cancel:hover {
            background-color: #5a6268;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            top: 10px;
            right: 15px;
        }

        .close-modal:hover {
            color: black;
        }

        /* Toast Styles */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 5px;
            color: white;
            font-weight: 500;
            display: none;
            z-index: 1000;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.3s ease-in-out;
        }

        .toast-success {
            background-color: var(--success-color);
        }

        .toast-error {
            background-color: var(--danger-color);
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }

            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        /* Loading Spinner */
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading-spinner.active {
            display: block;
        }

        .loading-spinner i {
            font-size: 2rem;
            color: var(--primary-color);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .modal-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    <div class="dashboard-container">
        <nav class="sidebar">
            <div class="sidebar-header">
                <h3><i class="fas fa-chalkboard-teacher"></i> Lecturer Panel</h3>
            </div>
            <ul class="nav-links">
                <li><a href="/lecturer/dashboard"><i class="fas fa-home"></i> Dashboard</a></li>
                <li><a href="/lecturer/assignments-page"><i class="fas fa-tasks"></i> My Assignments</a></li>
                <li><a href="/lecturer/submissions" class="active"><i class="fas fa-file-alt"></i> All Submissions</a>
                </li>
                <li><a href="/lecturer/reports"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a href="/auth/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </nav>

        <main class="main-content">
            <header class="dashboard-header">
                <h1><i class="fas fa-file-alt"></i> All Submissions</h1>
                <div class="user-info">
                    <i class="fas fa-user-circle"></i> Welcome, <%= user.full_name %>
                </div>
            </header>

            <div class="table-container">
                <h2><i class="fas fa-list"></i> Submission List</h2>
                <div id="loadingSpinner" class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading submissions...</p>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Assignment</th>
                            <th>Submission Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="submissionsTableBody">
                        <!-- Submissions will be loaded here -->
                    </tbody>
                </table>
                <div id="noSubmissions" class="no-data" style="display: none;">
                    <i class="fas fa-inbox fa-3x" style="color: #ccc; margin-bottom: 20px;"></i>
                    <h3>No submissions found</h3>
                    <p>No submissions have been made to your assignments yet.</p>
                </div>
            </div>
        </main>
    </div>

    <!-- Grading Modal -->
    <div id="gradingModal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2><i class="fas fa-check-circle"></i> Grade Submission</h2>
            <div class="modal-grid">
                <div class="file-preview-section">
                    <h3>Submission Preview</h3>
                    <div class="file-preview-container" id="filePreview">
                        <!-- File preview will be loaded here -->
                    </div>
                </div>
                <div class="grade-form">
                    <div class="form-group">
                        <label for="studentName">Student:</label>
                        <input type="text" id="studentName" readonly>
                    </div>
                    <div class="form-group">
                        <label for="assignmentTitle">Assignment:</label>
                        <input type="text" id="assignmentTitle" readonly>
                    </div>
                    <div class="form-group">
                        <label for="submissionDate">Submission Date:</label>
                        <input type="text" id="submissionDate" readonly>
                    </div>
                    <div class="form-group">
                        <label for="grade">Grade (0-100):</label>
                        <input type="number" id="grade" min="0" max="100" required>
                    </div>
                    <div class="form-group">
                        <label for="feedback">Feedback:</label>
                        <textarea id="feedback" required></textarea>
                    </div>
                    <div class="modal-actions">
                        <button class="btn btn-cancel" onclick="closeModal()">Cancel</button>
                        <button class="btn btn-primary" onclick="submitGrade()">Submit Grade</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script>
        let currentSubmissionId = null;

        // Load submissions on page load
        document.addEventListener('DOMContentLoaded', function () {
            loadSubmissions();
        });

        // Function to load all submissions
        async function loadSubmissions() {
            const spinner = document.getElementById('loadingSpinner');
            const tableBody = document.getElementById('submissionsTableBody');
            const noSubmissions = document.getElementById('noSubmissions');

            spinner.classList.add('active');
            tableBody.innerHTML = '';
            noSubmissions.style.display = 'none';

            try {
                const response = await fetch('/lecturer/all-submissions');
                const data = await response.json();

                if (data.success) {
                    if (data.submissions.length === 0) {
                        noSubmissions.style.display = 'block';
                    } else {
                        data.submissions.forEach(submission => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${submission.student_name}</td>
                                <td>${submission.assignment_title}</td>
                                <td>${formatDate(submission.submitted_at)}</td>
                                <td>
                                    <span class="status-badge status-${submission.status.toLowerCase()}">
                                        ${submission.status}
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn-view" onclick="viewSubmission('${submission.submission_id}', '${submission.student_name}', '${submission.assignment_title}', '${submission.submitted_at}')">
                                            <i class="fas fa-eye"></i> View
                                        </button>
                                        ${submission.status.toLowerCase() === 'pending' ?
                                    `<button class="btn-grade" onclick="openGradingModal('${submission.submission_id}', '${submission.student_name}', '${submission.assignment_title}', '${submission.submitted_at}')">
                                                <i class="fas fa-check-circle"></i> Grade
                                            </button>` :
                                    `<button class="btn-grade" onclick="viewGrade('${submission.submission_id}')">
                                                <i class="fas fa-star"></i> View Grade
                                            </button>`
                                }
                                    </div>
                                </td>
                            `;
                            tableBody.appendChild(row);
                        });
                    }
                } else {
                    showToast('Failed to load submissions', 'error');
                }
            } catch (error) {
                showToast('Error loading submissions', 'error');
            } finally {
                spinner.classList.remove('active');
            }
        }

        // Function to format date
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }

        // Function to view submission (same as grade but read-only)
        function viewSubmission(submissionId, studentName, assignmentTitle, submittedAt) {
            openGradingModal(submissionId, studentName, assignmentTitle, submittedAt, true);
        }

        // Function to open grading modal
        function openGradingModal(submissionId, studentName, assignmentTitle, submittedAt, readOnly = false) {
            currentSubmissionId = submissionId;

            // Fill modal with submission data
            document.getElementById('studentName').value = studentName;
            document.getElementById('assignmentTitle').value = assignmentTitle;
            document.getElementById('submissionDate').value = formatDate(submittedAt);

            // Load file preview
            loadFilePreview(submissionId);

            // Show modal
            document.getElementById('gradingModal').style.display = 'block';

            // If read-only, disable grading fields
            if (readOnly) {
                document.getElementById('grade').disabled = true;
                document.getElementById('feedback').disabled = true;
                document.querySelector('.modal-actions').style.display = 'none';
            } else {
                document.getElementById('grade').disabled = false;
                document.getElementById('feedback').disabled = false;
                document.querySelector('.modal-actions').style.display = 'flex';
            }
        }

        // Function to load file preview
        async function loadFilePreview(submissionId) {
            const previewContainer = document.getElementById('filePreview');
            previewContainer.innerHTML = '<p>Loading preview...</p>';

            try {
                const response = await fetch(`/lecturer/submission/${submissionId}/preview`);
                const data = await response.json();

                if (data.success) {
                    if (data.fileType === 'pdf') {
                        const pdfUrl = `data:application/pdf;base64,${data.fileContent}`;
                        previewContainer.innerHTML = `<iframe src="${pdfUrl}" width="100%" height="100%"></iframe>`;
                    } else {
                        const textContent = atob(data.fileContent);
                        previewContainer.innerHTML = `<div class="text-preview">${textContent}</div>`;
                    }
                } else {
                    previewContainer.innerHTML = '<p>No preview available</p>';
                }
            } catch (error) {
                previewContainer.innerHTML = '<p>Error loading preview</p>';
            }
        }

        // Function to view grade (placeholder for now)
        function viewGrade(submissionId) {
            showToast('Grade viewing functionality coming soon!', 'success');
        }

        // Function to close modal
        function closeModal() {
            document.getElementById('gradingModal').style.display = 'none';
            currentSubmissionId = null;
        }

        // Function to submit grade
        async function submitGrade() {
            const grade = document.getElementById('grade').value;
            const feedback = document.getElementById('feedback').value;

            if (!grade || !feedback) {
                showToast('Please fill in both grade and feedback', 'error');
                return;
            }

            try {
                const response = await fetch('/lecturer/submission/grade', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        submissionId: currentSubmissionId,
                        grade: grade,
                        feedback: feedback
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showToast('Grade submitted successfully!', 'success');
                    closeModal();
                    loadSubmissions(); // Refresh the table
                } else {
                    showToast(data.message || 'Failed to submit grade', 'error');
                }
            } catch (error) {
                showToast('Error submitting grade', 'error');
            }
        }

        // Close modal when clicking the X
        document.querySelector('.close-modal').onclick = function () {
            closeModal();
        }

        // Close modal when clicking outside
        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                closeModal();
            }
        }

        // Toast functionality
        function showToast(message, type) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast toast-${type}`;
            toast.style.display = 'block';

            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease-in-out';
                setTimeout(() => {
                    toast.style.display = 'none';
                    toast.style.animation = 'slideIn 0.3s ease-in-out';
                }, 300);
            }, 3000);
        }
    </script>
</body>

</html>